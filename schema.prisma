// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

// ---------------------------------------------------------------------- //
// ------------------------- Common Models ------------------------------ //
// ---------------------------------------------------------------------- //

model User {
  id              String    @id @default(dbgenerated("gen_random_uuid()"))
  // This should probably have a shared id with Cloud Services so that we can look up users across them
  cloudServicesId String?   @unique
  discordId       String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastSeen        DateTime?
  role            Role      @default(USER)
  deleted         Boolean   @default(false)

  applications    Application[]
  specifications  Specification[]
  llmCallAttempts LLMCallAttempt[]
  deployments     Deployment[]
}

enum Role {
  USER
  ADMIN
}

model Application {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  deleted     Boolean  @default(false)

  specifications  Specification[]
  llmCallAttempts LLMCallAttempt[]
  User            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String?
}

// ------------------------- Requirements Models ------------------------------ //
// ApplicationRequirements represents the requirements for a specific application.  
// ------------------------- -------------------------------------------------- //

model Specification {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
  name      String
  context   String

  apiRouteSpecs APIRouteSpec[]
  completedApps CompletedApp[]
  User          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String?
  Application   Application?   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId String?
}

enum AccessLevel {
  PUBLIC
  USER
  ADMIN
}

enum HTTPVerb {
  GET
  POST
  PUT
  PATCH
  DELETE
  OPTIONS
  HEAD
  CONNECT
  TRACE
}

model APIRouteSpec {
  id           String      @id @default(dbgenerated("gen_random_uuid()"))
  createdAt    DateTime    @default(now())
  functionName String
  method       HTTPVerb
  path         String
  description  String
  accessLevel  AccessLevel

  codeGraphs     CodeGraph[]
  compiledRoutes CompiledRoute[]

  Specification    Specification?  @relation(fields: [specificationId], references: [id], onDelete: Cascade)
  specificationId  String?
  ResponseObject   ResponseObject? @relation(fields: [responseObjectId], references: [id], onDelete: Cascade)
  responseObjectId String?
  RequestObject    RequestObject?  @relation(fields: [requestObjectId], references: [id], onDelete: Cascade)
  requestObjectId  String?
  DatabaseSchema   DatabaseSchema? @relation(fields: [databaseSchemaId], references: [id], onDelete: Cascade)
  databaseSchemaId String?
}

model ResponseObject {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime @default(now())
  name        String
  description String

  apiRouteSpecs APIRouteSpec[]
  params        Param[]
}

model RequestObject {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime @default(now())
  name        String
  description String

  apiRouteSpecs APIRouteSpec[]
  params        Param[]
}

model Param {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime @default(now())
  name        String
  description String
  paramType   String

  ResponseObject   ResponseObject? @relation(fields: [responseObjectId], references: [id])
  responseObjectId String?
  RequestObject    RequestObject?  @relation(fields: [requestObjectId], references: [id])
  requestObjectId  String?
}

// DatabaseSchema represents the schema of a database.
// It includes a description and relationships to database tables and code graphs.
model DatabaseSchema {
  id            String                       @id @default(dbgenerated("gen_random_uuid()"))
  name          String?
  createdAt     DateTime                     @default(now())
  embedding     Unsupported("vector(1536)")?
  description   String
  DatabaseTable DatabaseTable[]
  codeGraphs    CodeGraph[]
  apiRouteSpecs APIRouteSpec[]
}

// DatabaseTable represents a table within a database schema.
// It includes details about the table and relationships to schemas and other tables.
model DatabaseTable {
  id          String                       @id @default(dbgenerated("gen_random_uuid()"))
  name        String?
  createdAt   DateTime                     @default(now())
  embedding   Unsupported("vector(1536)")?
  description String
  definition  String

  // This seems like its gonna be a nightmare to keep track of for 1-1 1-M and M-M relationships
  relatedFromTables DatabaseTable[] @relation("TableRelations")
  relatedToTables   DatabaseTable[] @relation("TableRelations")
  DatabaseSchema    DatabaseSchema? @relation(fields: [databaseSchemaId], references: [id])
  databaseSchemaId  String?
}

// ------------------------- Architect Models ---------------------------- //
// Database models for the architect
// ------------------------- --------------------------------------------- //

// CodeGraph represents a graph-based representation of code or logic.
// It is associated with function definitions and can be linked to a database schema.
model CodeGraph {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt    DateTime @default(now())
  functionName String
  apiPath      String
  imports      String[]
  codeGraph    String

  functionDefinitions FunctionDefinition[]
  APIRouteSpec        APIRouteSpec?        @relation(fields: [apiRouteSpecId], references: [id], onDelete: Cascade)
  apiRouteSpecId      String?
  DatabaseSchema      DatabaseSchema?      @relation(fields: [databaseSchemaId], references: [id], onDelete: Cascade)
  databaseSchemaId    String?
  CompiledRoute       CompiledRoute?       @relation(fields: [compiledRouteId], references: [id], onDelete: Cascade)
  compiledRouteId     String?
}

// FunctionDefinition defines a function, including its input and return types.
// It links to a specific code graph and function.
model FunctionDefinition {
  id               String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt        DateTime @default(now())
  name             String
  docString        String
  args             String
  returnType       String
  functionTemplate String

  CodeGraph   CodeGraph? @relation(fields: [codeGraphId], references: [id], onDelete: Cascade)
  codeGraphId String?
  Functions   Functions? @relation(fields: [functionsId], references: [id], onDelete: Cascade)
  functionsId String?
}

// ------------------------- Developer Models ---------------------------- //
// Database models for the developer
// ------------------------------------------------------------------------ //

// Functions represents individual software functions.
// It includes information about the function and its relationships to packages and compiled routes.
model Functions {
  id         String                       @id @default(dbgenerated("gen_random_uuid()"))
  createdAt  DateTime                     @default(now())
  embedding  Unsupported("vector(1536)")?
  name       String
  docString  String
  args       String
  returnType String
  code       String

  functionDefinitions FunctionDefinition[]
  // Is one function part of many packages?
  packages            Package[]
  // Is one function part of many compiled routes?
  compiledRoutes      CompiledRoute[]
}

// Package represents a software package, including its version and specifier.
// It is related to functions that are part of the package.
model Package {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime @default(now())
  packageName String
  version     String
  specifier   String

  functions Functions[]
}

// ------------------------- Delivery Models ----------------------------- //

// CompiledRoute represents a version of a route that has been processed or compiled.
// It links to its source code graph and associated functions and applications.
model CompiledRoute {
  id          String                       @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime                     @default(now())
  embedding   Unsupported("vector(1536)")?
  description String
  code        String
  // Why is this unique and here with the many to many relationship?
  codeGraphId String                       @unique

  functions     Functions[]
  completedApps CompletedApp[]

  codeGraphs     CodeGraph[]
  APIRouteSpec   APIRouteSpec? @relation(fields: [apiRouteSpecId], references: [id], onDelete: Cascade)
  apiRouteSpecId String?
}

// Application represents the main software application entity.
// It includes basic metadata and has relationships with compiled routes.
model CompletedApp {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deleted     Boolean  @default(false)
  name        String
  description String

  compiledRoutes  CompiledRoute[]
  deployments     Deployment[]
  Specification   Specification?  @relation(fields: [specificationId], references: [id], onDelete: Cascade)
  specificationId String?
}

// ---------------------------------------------------------------------- //
// ------------------------- Deployment Model --------------------------- //
// ---------------------------------------------------------------------- //

model Deployment {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
  fileName  String
  fileSize  Int
  path      String?
  fileBytes Bytes?

  User           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  CompletedApp   CompletedApp? @relation(fields: [completedAppId], references: [id], onDelete: Cascade)
  completedAppId String?
}

// ------------------------- LLM Models ----------------------------- //

model LLMCallTemplate {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt    DateTime @default(now())
  templateName String
  fileHash     String
  systemPrompt String
  userPrompt   String
  retryPrompt  String

  uses LLMCallAttempt[]
}

model LLMCallAttempt {
  id               String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt        DateTime @default(now())
  model            String
  completionTokens Int
  promptTokens     Int
  totalTokens      Int
  attempt          Int
  prompt           Json
  response         String

  User              User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String?
  Application       Application?     @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId     String?
  LLMCallTemplate   LLMCallTemplate? @relation(fields: [llmCallTemplateId], references: [id], onDelete: Cascade)
  llmCallTemplateId String?
}

// Application (Task)
// Specification (refs Application)
// CompletedApp (refs Specification)
// Deployement (refs CompletedApp)
